{"version":3,"sources":["components/Theme.js","components/Titlebar.js","components/Input.js","App.js","reportWebVitals.js","index.js"],"names":["theme","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","Titlebar","Box","bgcolor","width","textAlign","display","flexDirection","justifyContent","alignContent","height","color","p","my","fontSize","fontFamily","fontWeight","Input","props","click","checked","FormControl","component","FormGroup","aria-label","row","FormControlLabel","id","value","control","Checkbox","label","labelPlacement","onClick","App","useState","localStorage","getItem","JSON","parse","list","setlist","input","setinput","comp","setcomp","setid","addToList","some","x","task","alert","length","temp","concat","useEffect","jsonList","stringify","Storage","setItem","store","style","backgroundColor","margin","noValidate","autoComplete","TextField","onKeyPress","e","key","preventDefault","required","onChange","event","target","variant","Button","size","padding","map","listItem","borderRadius","index","findIndex","newList","slice","isCompleted","updateComps","filter","item","deleteItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eae8c810.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      light: '#757ce8',\r\n      main: '#3f50b5',\r\n      dark: '#002884',\r\n      contrastText: '#fff',\r\n    },\r\n    secondary: {\r\n      light: '#ff7961',\r\n      main: '#f44336',\r\n      dark: '#ba000d',\r\n      contrastText: '#000',\r\n    },\r\n  },\r\n});\r\n\r\nexport default theme;","import React from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nimport theme from './Theme';\r\n\r\n\r\nexport default function Titlebar() {\r\n  return (\r\n    <Box bgcolor={theme.palette.primary.light} width=\"100%\" textAlign=\"center\" display=\"flex\" flexDirection=\"column\" justifyContent=\"center\" alignContent=\"center\">\r\n      <Box bgcolor={theme.palette.primary.main} width=\"100%\" height=\"20px\" />\r\n      <Box color='white' width=\"auto\" height=\"30px\" p={2} my={0.5} fontSize=\"40px\" fontFamily=\"Arial\" fontWeight=\"bold\">\r\n        Todo-List\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\n","import React from 'react';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\n\r\nexport default function Input(props) {\r\n    const { click, checked } = props;\r\n\r\n    return (\r\n        <FormControl component=\"fieldset\">\r\n            <FormGroup color=\"white\" aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                    id=\"myCheck\"\r\n                    value=\"start\"\r\n                    control={<Checkbox color=\"primary\" />}\r\n                    label=\"Completed?\"\r\n                    labelPlacement=\"top\"\r\n                    onClick={() => click()}\r\n                    checked={checked}\r\n                />\r\n            </FormGroup>\r\n        </FormControl>\r\n    );\r\n}","import React, { useEffect, useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Titlebar from './components/Titlebar';\nimport Input from './components/Input'\nimport Box from '@material-ui/core/Box';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TextField from '@material-ui/core/TextField';\n\nexport default function App() {\n\n  const [list, setlist] = useState(\n    localStorage.getItem(\"storedList\") !== null ? JSON.parse(localStorage.getItem(\"storedList\")) : []\n  );\n  const [input, setinput] = useState(\"\");\n  const [comp, setcomp] = useState(false);\n  const [id, setid] = useState(0);\n\n  useEffect(() => {\n    store();\n  });\n\n  function addToList() {\n    if (list.some(x => x.task === input)) {\n      alert(\"Cannot have duplicate items!\");\n    }\n    else if (input.length !== 0) {\n      let temp = list.concat({ 'task': input, 'isCompleted': comp , 'id': id});\n      setinput(\"\");\n      setlist(temp);\n      setid(id + 1);\n      setcomp(false);\n    }\n    else {\n      alert(\"Your item needs a name!\");\n    }\n  }\n\n  function store() {\n    let jsonList = JSON.stringify(list);\n    if (typeof (Storage) !== \"undefined\") {\n      localStorage.setItem(\"storedList\", jsonList);\n    }\n  }\n\n  function isComp() {\n    setcomp(!comp);\n  }\n\n  function handleKeyPress(e) {\n    if (e.key === 'Enter') {\n      addToList();\n      e.preventDefault();\n    }\n  }\n\n  function deleteItem(task) {\n    const newList = list.filter((item) => item.task !== task);\n    setlist(newList);\n  }\n\n  function updateComps(id) {\n    const index = list.findIndex(task => task.id === id);\n    let newList = list.slice();\n    newList[index].isCompleted = !newList[index].isCompleted;\n    setlist(newList);\n  }\n\n  return (\n    <div style={{ backgroundColor: \"#424245\" }}>\n      <Titlebar />\n      <Box margin=\"10px\" display=\"flex\" justifyContent=\"center\">\n        <form noValidate autoComplete=\"off\">\n          <TextField onKeyPress={handleKeyPress} required value={input} onChange={(event) => setinput(event.target.value)} id=\"todo-text\" label=\"Todo\" variant=\"filled\" />\n        </form>\n        <Input click={isComp} checked={comp} />\n        <Box margin=\"18px\" display=\"flex\" justifyContent=\"center\" alignContent=\"center\">\n          <Button size=\"large\" onClick={addToList} variant=\"contained\" color=\"primary\">Add Item</Button>\n        </Box>\n      </Box>\n      <Box display=\"flex\" justifyContent=\"center\" alignContent=\"center\">\n        <Box padding=\"10px\" color=\"white\" textAlign=\"center\" width=\"500px\" height=\"100vh\" display=\"flex\" flexDirection=\"column\">\n          {list.map(listItem =>\n            <Box margin=\"5px\" padding=\"5px\" borderRadius=\"5px\" bgcolor=\"gray\" key={listItem.id}>\n              {listItem.task}\n              <Checkbox color=\"primary\" onClick={() => updateComps(listItem.id)} checked={listItem.isCompleted} />\n              <Button onClick={() => deleteItem(listItem.task)} variant=\"contained\" color=\"secondary\" >Delete</Button>\n            </Box>)}\n        </Box>\n      </Box>\n    </div>\n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}